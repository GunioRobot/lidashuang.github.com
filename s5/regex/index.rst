.. include:: <s5defs.txt>

=================================
Regular expression
=================================

:Authors: `lidashuang`_
:Date:     2011-09-30  
:BLOG:   http://osser.me



.. container:: handout

   How to create quick, good-looking presentation slide shows with
   Docutils_/reStructuredText_ and S5_.



.. _Docutils: http://docutils.sourceforge.net/
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _S5: http://meyerweb.com/eric/tools/s5/
.. _Firefox: http://www.mozilla.com/firefox/
.. |bullet| unicode:: U+02022
.. |mode| unicode:: U+00D8 .. capital o with stroke

.. |cc-byncsa31| image:: i/icon/cc-byncnd-88x31.png
   :alt: (CC)by-nc-sa 许可证
   :target: http://creativecommons.org/licenses/by-nc-sa/2.5/cn/
.. |cc-byncsa15| image:: i/icon/cc-byncnd-80x15.png
   :alt: (CC)by-nc-sa 许可证
   :target: http://creativecommons.org/licenses/by-nc-sa/2.5/cn/

.. _lidashuang:
    http://osser.me

.. footer:: sdutlinux |bullet| 2011/9/29

.. _(CC)by-nc-sa:
    http://creativecommons.org/licenses/by-nc-sa/2.5/cn/
.. _FireFox:
    http://www.mozilla.com/firefox/
.. _S5介绍:
    http://zoomquiet.org/res/s5/100826-PyTDD/s5.html

.. |lr_s5| image:: i/levelradar_s5.png
    :scale: 100 %



正则表达式是什么？
========================


.. class:: incremental

   .. class:: left

      描述字符模式的一种微型语言

      正则表达式是强大，高效的文本处理工具。

      正则表达式由称为元字符的特殊功能字符和其他字符组成。

some example
=================


.. class:: incremental 

         P.*l

        * P是普通字符，与字母P本身相匹配
        * "." 与任意字符相匹配
        * "*" 表示前面的模式"." 任意次
        * l 与字母l本身相匹配


历史.风格
===============

.. class:: incremental 
    
    * Warren McCulloch 和 Walter Pitts 这两位神经生理学家研究出一种数学方式来描述这些神经网络
    * 在20世纪50年代，数学家斯蒂芬·科尔·克莱尼利用称之为正则集合的数学符号来描述此模型
    * 肯·汤普逊将此符号系统引入编辑器QED，然后是UNIX上的编辑器ed，并最终引入grep

    * POSIX风格的正则表达式
    * Perl风格正则表达式：Perl-Compatible Regular Expression

正则表达式工具
========================

.. class:: incremental 
    
    * grep 
    * ed 
    * sed 
    * awk
    * vim 
    * egrep 
    * and so on ...


普通字符
============

.. class:: left 
    
    元字符以外的普通字符，都与自身相匹配。
    
Example::
        
        regex与regex相匹配



常用元字符-->字符族
===============================

.. class:: incremental
    
    用括号[]括号起来的部分为字符族,[^]表示取反

      
Example:: 
            *  [abcde] 
            *  [a-z]

任意一个字符
===============================

.. class::  incremental
   
    .. class:: center
        
    "." 表示任意一个字符


重复 * + ? {num,num}
===============================

.. class:: incremental 
    

    =======   =========== ============
    写法        下限        上限
    -------   ----------- ------------ 
    a*            0         无
    -------   ----------- ------------ 
    a+          1           无
    -------   ----------- ------------
    a?          0           1
    -------   ----------- ------------
    a{n,m}      n           m
    -------   ----------- ------------
    a{n}        n           n
    -------   ----------- ------------
    a{n,}       n           无
    =======   =========== ============

团体化
===============================

.. class:: incremental

    * ma+
    * (ma)+

锚点
===============================

.. class:: center 
    
    .. class:: incremental
        
        * ^ $
        * \A 字符串头
        * \Z(字符串尾，若换行，匹配前一字符) \z 
        * \b 词头或词尾([]外)
        *  (?=) 用模式指定位置
        *  (?!) 用否定模式指定位置



选择
===============================

.. class:: Text Size 

    yes|no




贪婪与懒惰
===============================

.. class:: incremental

    * 贪婪：一定要找到与模式相一致的最长的字符串。
    * 懒惰： 第一次与模式匹配就停止


    
正则表达式引擎
=================================

.. class:: incremental 
    
    * DFA-->文本导向
    * NFA-->正则导向

Example::
    
    regex|regex not 
    

元字符表1
======================

.. class:: incremental 
    
    .. class:: borderless

    ========   ====================================  =======   ====================================  
     元字符     含义                                  元字符        含义
    --------   ------------------------------------  -------   ------------------------------------
    .           与任意单个字符相匹配                  {m,n}?    重复m到n次（懒惰匹配）
    --------   ------------------------------------  -------   ------------------------------------
    []         [a-z]与a到z之间的任何一个相匹配       ^         行首匹配
    --------   ------------------------------------  -------   ------------------------------------
    [^]        [^a-z]将a到z以外的字符匹配            $         行尾匹配
    --------   ------------------------------------  -------   ------------------------------------
    \w          构成单词的字符                        \A        字符串头
    --------   ------------------------------------  -------   ------------------------------------
    \W          构成单词的字符以外                    \Z        字符串尾（若含换行，匹配前一字符）
    --------   ------------------------------------  -------   ------------------------------------
    \s           空白文字                             \z        字符串尾 
    --------   ------------------------------------  -------   ------------------------------------
    \S          非空白文字                            \b         词头或词尾
    --------   ------------------------------------  -------   ------------------------------------
    \d          数字，与[0-9] 相同                     \B       非词头或非词尾
    --------   ------------------------------------  -------   ------------------------------------
    \D           非数字                                 |       选择
    ========   ====================================  =======   ====================================  
    
元字符表2
======================

.. class:: incremental 
    
    .. class:: borderless

    ========   ====================================  =======   ==================================== 
     元字符     含义                                  元字符        含义
    --------   ------------------------------------  -------   ------------------------------------
    \*          匹配前面的子表达式零次或多次           ()       团体化
    --------   ------------------------------------  -------   ------------------------------------
    \+          匹配前面的子表达式一次或多次          \1,\2     后方参照（对就第n个括弧）
    --------   ------------------------------------  -------   ------------------------------------
    ?           匹配前面的子表达式零次或一次          (?:)      团体化（无后方参照）
    --------   ------------------------------------  -------   ------------------------------------
    {m,n}       重复m次或n次                          (?=)      用模式指定位置（无宽度）
    --------   ------------------------------------  -------   ------------------------------------
    \*?         重复0次以上(懒惰匹配)                 (?!)      用否定模式指定位置（无宽度）
    --------   ------------------------------------  -------   ------------------------------------
    \+?         重复1次以上 (懒惰匹配)                (?#)     注释
    --------   ------------------------------------  -------   ------------------------------------
    ??          重复0次或1次(懒惰匹配)
    ========   ====================================  =======   ==================================== 

正则表达式工具
=============================

.. class:: incremental 
    
  在线的测试网站::

    http://nregex.com/nregex/default.aspx
    http://regexpal.com/ 
    http://regex.larsolavtorvik.com/
    http://www.rubular.com/
    http://osteele.com/tools/rework/

  linux::

    kiki http://code.google.com/p/kiki-re/
    grep vi awk sed and so on 

参考
==========================

.. class:: center 

    * :《精通正则表达式》
    * 《正则表达式经典实例》
    * 《sed 与 awk》
    * 《松本行弘的程序世界》

`S5 <http://www.meyerweb.com/eric/tools/s5/>`__
==================================================

- S\ :sup:`5`\ == a :orange:`S` imple :orange:`S` tandards-Based :orange:`S` lide :orange:`S` how :orange:`S` ystem 
- 仅用 CSS+JS 实现的HTML格式幻灯演示工具 


That's All!
==================

.. class:: huge

    `Any questions?`


.. topic:: Links
   :class: hidden print

   .. target-notes:: :class: hidden print
